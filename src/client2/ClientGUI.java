/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client2;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;

/**
 *
 * @author Krzysiek
 */
public class ClientGUI extends javax.swing.JFrame{
    private String currentLocalDir;
    private Client2 client;
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI(){
        this.client = new Client2();
        
        this.currentLocalDir = System.getProperty("user.dir");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        ButtonStor = new javax.swing.JButton();
        ButtonRetr = new javax.swing.JButton();
        TextFieldIP = new javax.swing.JTextField();
        labelIP = new javax.swing.JLabel();
        ButtonConnect = new javax.swing.JButton();
        labelServer = new javax.swing.JLabel();
        ButtonDele = new javax.swing.JButton();
        ButtonRmd = new javax.swing.JButton();
        ButtonMkd = new javax.swing.JButton();
        labelUser = new javax.swing.JLabel();
        TextFieldUser = new javax.swing.JTextField();
        labelPass = new javax.swing.JLabel();
        TextFieldPassword = new javax.swing.JPasswordField();
        jScrollPane3 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList();
        backButton = new javax.swing.JButton();
        currentLocalDirLabel = new javax.swing.JTextField();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Partial Commander");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ButtonStor.setText(">>");
        ButtonStor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStorActionPerformed(evt);
            }
        });

        ButtonRetr.setText("<<");
        ButtonRetr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRetrActionPerformed(evt);
            }
        });

        TextFieldIP.setText("127.0.0.1");
        TextFieldIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldIPActionPerformed(evt);
            }
        });

        labelIP.setText("IP:");

        ButtonConnect.setText("Connect");
        ButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConnectActionPerformed(evt);
            }
        });

        labelServer.setText("Server actions:");

        ButtonDele.setText("Delete File");

        ButtonRmd.setText("Delete Directory");

        ButtonMkd.setText("Create Directory");

        labelUser.setText("User:");

        labelPass.setText("Password:");

        clientList.setModel(new ClientListModel(currentLocalDir));
        clientList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clientList.setCellRenderer(new FileRenderer(true));
        clientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(clientList);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        currentLocalDirLabel.setEditable(false);
        currentLocalDirLabel.setText(currentLocalDir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(labelIP)
                                        .addGap(3, 3, 3)
                                        .addComponent(TextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelUser)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(currentLocalDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelPass)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ButtonConnect))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(labelServer))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(ButtonDele))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(ButtonRmd, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(ButtonMkd)))
                                .addGap(228, 228, 228))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ButtonRetr))
                                    .addComponent(ButtonStor)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton)))
                .addGap(210, 210, 210))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelIP)
                    .addComponent(ButtonConnect)
                    .addComponent(labelUser)
                    .addComponent(TextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPass)
                    .addComponent(TextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentLocalDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(ButtonStor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonRetr)
                        .addGap(19, 19, 19)
                        .addComponent(labelServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonDele)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonRmd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonMkd)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextFieldIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldIPActionPerformed

    private void ButtonStorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStorActionPerformed
//        TreePath localPath = localTree.getSelectionPath();
//        System.out.println(localPath.toString());
//        String[] localPathArray = localPath.toString().replaceAll("[\\[\\]]", "").split(", ");
//        TreePath serverPath = serverTree.getSelectionPath();
//        System.out.println(serverPath.toString());
//        String[] serverPathArray = serverPath.toString().replaceAll("[\\[\\]]", "").split(", ");
//        if(client.isLogged()){
//            String relativeLocalDir = File.separator + "";
//            String relativeServerDir = File.separator + "";
//            for(int i=1; i < localPathArray.length-1 ; i++){
//                relativeLocalDir += localPathArray[i] + File.separator;
//            }
//            String fileName = localPathArray[localPathArray.length-1];
//            for(int i=1; i < serverPathArray.length-1 ; i++){
//                relativeServerDir += serverPathArray[i] + File.separator;
//            }
//            try {
//                String originalUserDir = System.setProperty("user.dir", currentLocalDir + relativeLocalDir);
//                client.changeDirectory(relativeServerDir);
//                client.putFile(currentLocalDir + relativeLocalDir, fileName);
//                client.changeDirectory("/");
//                // TODO: put to selected folder
//                System.setProperty("user.dir", originalUserDir);
//            } catch (IOException ex) {
//                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (FileTransferFailedException ex) {
//                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(null, "Błąd przesyłania pliku", "Błąd pliku", JOptionPane.ERROR_MESSAGE);
//            }
//        }
//        else{
//            
//        }
    }//GEN-LAST:event_ButtonStorActionPerformed

    private void ButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConnectActionPerformed
        try {
            client.connect(TextFieldIP.getText());
            System.out.println(TextFieldPassword.getPassword());
            client.login(TextFieldUser.getText(), TextFieldPassword.getText());
//            serverTree.setModel(new ServerTreeModel(client));
//            jScrollPane2.setViewportView(serverTree);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonConnectActionPerformed

    private void ButtonRetrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRetrActionPerformed
//        TreePath path = serverTree.getSelectionPath();
//        System.out.println(path.toString());
    }//GEN-LAST:event_ButtonRetrActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(client.isLogged()){
            try {
                client.quit();
                System.out.println(client.getResponse());
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void clientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientListMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            if(clientList.getSelectedValue() != null){
                if(((File) clientList.getSelectedValue()).isDirectory()){
                    currentLocalDir = currentLocalDir + File.separator + ((File) clientList.getSelectedValue()).getName();
                    System.out.println(currentLocalDir);
                    currentLocalDirLabel.setText(currentLocalDir);
                    clientList.setModel(new ClientListModel(currentLocalDir));
                }
            }
       }
    }//GEN-LAST:event_clientListMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if(!currentLocalDir.substring(0, currentLocalDir.lastIndexOf(File.separator)).isEmpty()){
            currentLocalDir = currentLocalDir.substring(0, currentLocalDir.lastIndexOf(File.separator));
            System.out.println(currentLocalDir);
            currentLocalDirLabel.setText(currentLocalDir);
            clientList.setModel(new ClientListModel(currentLocalDir));
        }
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            @Override
            public void run(){
                new ClientGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonConnect;
    private javax.swing.JButton ButtonDele;
    private javax.swing.JButton ButtonMkd;
    private javax.swing.JButton ButtonRetr;
    private javax.swing.JButton ButtonRmd;
    private javax.swing.JButton ButtonStor;
    private javax.swing.JTextField TextFieldIP;
    private javax.swing.JPasswordField TextFieldPassword;
    private javax.swing.JTextField TextFieldUser;
    private javax.swing.JButton backButton;
    private javax.swing.JList clientList;
    private javax.swing.JTextField currentLocalDirLabel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel labelIP;
    private javax.swing.JLabel labelPass;
    private javax.swing.JLabel labelServer;
    private javax.swing.JLabel labelUser;
    // End of variables declaration//GEN-END:variables
}
