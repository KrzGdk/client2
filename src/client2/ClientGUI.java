/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package client2;

import com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringStack;
import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;

/**
 *
 * @author Krzysiek
 */
public class ClientGUI extends javax.swing.JFrame{
    private String currentLocalDir;
    private String currentServerDir;
    private Client2 client;
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI(){
        this.currentLocalDir = System.getProperty("user.dir");
        this.currentServerDir = "/";
        initComponents();
        this.client = new Client2(commandsArea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        ButtonStor = new javax.swing.JButton();
        ButtonRetr = new javax.swing.JButton();
        TextFieldIP = new javax.swing.JTextField();
        labelIP = new javax.swing.JLabel();
        ButtonConnect = new javax.swing.JButton();
        labelServer = new javax.swing.JLabel();
        ButtonDele = new javax.swing.JButton();
        ButtonRmd = new javax.swing.JButton();
        ButtonMkd = new javax.swing.JButton();
        labelUser = new javax.swing.JLabel();
        TextFieldUser = new javax.swing.JTextField();
        labelPass = new javax.swing.JLabel();
        TextFieldPassword = new javax.swing.JPasswordField();
        jScrollPane3 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JList();
        backButton = new javax.swing.JButton();
        currentServerDirLabel = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandsArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        serverList = new javax.swing.JList();
        currentLocalDirLabel = new javax.swing.JTextField();
        serverBackButton = new javax.swing.JButton();
        ButtonDisconnect = new javax.swing.JButton();
        serverRefreshButton = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Partial Commander");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ButtonStor.setText(">>");
        ButtonStor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStorActionPerformed(evt);
            }
        });

        ButtonRetr.setText("<<");
        ButtonRetr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRetrActionPerformed(evt);
            }
        });

        TextFieldIP.setText("127.0.0.1");
        TextFieldIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldIPActionPerformed(evt);
            }
        });

        labelIP.setText("IP:");

        ButtonConnect.setText("Connect");
        ButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonConnectActionPerformed(evt);
            }
        });

        labelServer.setText("Server actions:");

        ButtonDele.setText("Delete File");

        ButtonRmd.setText("Delete Directory");

        ButtonMkd.setText("Create Directory");
        ButtonMkd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMkdActionPerformed(evt);
            }
        });

        labelUser.setText("User:");

        labelPass.setText("Password:");

        TextFieldPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TextFieldPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TextFieldPasswordFocusLost(evt);
            }
        });

        clientList.setModel(new ClientListModel(currentLocalDir));
        clientList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        clientList.setCellRenderer(new FileRenderer(true));
        clientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(clientList);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        currentServerDirLabel.setEditable(false);
        currentServerDirLabel.setText(currentServerDir);

        commandsArea.setEditable(false);
        commandsArea.setColumns(20);
        commandsArea.setRows(5);
        jScrollPane1.setViewportView(commandsArea);

        serverList.setCellRenderer(new ServerFileRenderer(true));
        serverList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serverListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(serverList);

        currentLocalDirLabel.setEditable(false);
        currentLocalDirLabel.setText(currentLocalDir);

        serverBackButton.setText("Back");
        serverBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverBackButtonActionPerformed(evt);
            }
        });

        ButtonDisconnect.setText("Disconnect");
        ButtonDisconnect.setEnabled(false);
        ButtonDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDisconnectActionPerformed(evt);
            }
        });

        serverRefreshButton.setText("Refresh");
        serverRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverRefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(labelIP)
                        .addGap(3, 3, 3)
                        .addComponent(TextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(labelPass)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ButtonConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonDisconnect)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                                            .addComponent(currentLocalDirLabel))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(7, 7, 7)
                                                        .addComponent(ButtonRmd))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(ButtonMkd))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(27, 27, 27)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(labelServer)
                                                            .addComponent(ButtonDele))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(ButtonRetr)
                                                    .addComponent(ButtonStor))
                                                .addGap(54, 54, 54))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(backButton)
                                        .addGap(395, 395, 395)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(serverBackButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(serverRefreshButton))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(currentServerDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(18, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelIP)
                    .addComponent(ButtonConnect)
                    .addComponent(labelUser)
                    .addComponent(TextFieldUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPass)
                    .addComponent(TextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(serverBackButton)
                    .addComponent(serverRefreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentLocalDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentServerDirLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(ButtonRetr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonStor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonDele)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonRmd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ButtonMkd)))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextFieldIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldIPActionPerformed

    private void ButtonStorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStorActionPerformed
        System.out.println(currentLocalDir);
        String file = clientList.getSelectedValue().toString();
        try {
            client.putFile(currentLocalDir, file, currentServerDir);
            serverList.setModel(new ServerListModel(currentServerDir,client));
        } catch (IOException | FileTransferFailedException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonStorActionPerformed

    private void ButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonConnectActionPerformed
        try {
            currentServerDir = "/";
            client.connect(TextFieldIP.getText());
            System.out.println(TextFieldPassword.getPassword());
            client.login(TextFieldUser.getText(), TextFieldPassword.getText());
            serverList.setModel(new ServerListModel(currentServerDir,client));
            ButtonDisconnect.setEnabled(true);
        } catch (UnknownHostException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonConnectActionPerformed

    private void ButtonRetrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRetrActionPerformed
//        TreePath path = serverTree.getSelectionPath();
//        System.out.println(path.toString());
    }//GEN-LAST:event_ButtonRetrActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(client.isLogged()){
            try {
                client.quit();
                System.out.println(client.getResponse());
            } catch (IOException ex) {
                Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void clientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientListMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            if(clientList.getSelectedValue() != null){
                if(((File) clientList.getSelectedValue()).isDirectory()){
                    currentLocalDir = currentLocalDir + File.separator + ((File) clientList.getSelectedValue()).getName();
                    System.out.println(currentLocalDir);
                    currentLocalDirLabel.setText(currentLocalDir);
                    clientList.setModel(new ClientListModel(currentLocalDir));
                }
            }
       }
    }//GEN-LAST:event_clientListMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if(!currentLocalDir.substring(0, currentLocalDir.lastIndexOf(File.separator)).isEmpty()){
            currentLocalDir = currentLocalDir.substring(0, currentLocalDir.lastIndexOf(File.separator));
            System.out.println(currentLocalDir);
            currentLocalDirLabel.setText(currentLocalDir);
            clientList.setModel(new ClientListModel(currentLocalDir));
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void TextFieldPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldPasswordFocusGained
        this.getRootPane().setDefaultButton(ButtonConnect);
    }//GEN-LAST:event_TextFieldPasswordFocusGained

    private void TextFieldPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TextFieldPasswordFocusLost
        this.getRootPane().setDefaultButton(null);
    }//GEN-LAST:event_TextFieldPasswordFocusLost

    private void serverListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverListMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            if(serverList.getSelectedValue() != null){
                if(((ServerFile) serverList.getSelectedValue()).toString().equals("..")){
                    if(!currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator)).isEmpty()){
                        currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator));
                        currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator)+1);
                        if(currentServerDir.equals("")) currentServerDir = "/";
                        System.out.println(currentServerDir);
                        currentServerDirLabel.setText(currentServerDir);
                        serverList.setModel(new ServerListModel(currentServerDir, client));
                    }
                }
                else if(((ServerFile) serverList.getSelectedValue()).isDir()){
                    currentServerDir = currentServerDir + ((ServerFile) serverList.getSelectedValue()) + File.separator;
                    System.out.println(currentServerDir);
                    currentServerDirLabel.setText(currentServerDir);
                    serverList.setModel(new ServerListModel(currentServerDir, client));
                }
            }
       }
    }//GEN-LAST:event_serverListMouseClicked

    private void serverBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverBackButtonActionPerformed
        if(!currentServerDir.equals("/")){
            if(!currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator)).isEmpty()){
                currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator));
                currentServerDir = currentServerDir.substring(0, currentServerDir.lastIndexOf(File.separator)+1);
                if(currentServerDir.equals("")) currentServerDir = "/";
                System.out.println(currentServerDir);
                currentServerDirLabel.setText(currentServerDir);
                serverList.setModel(new ServerListModel(currentServerDir, client));
            }
        }
    }//GEN-LAST:event_serverBackButtonActionPerformed

    private void ButtonDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDisconnectActionPerformed
        try {
            serverList.setListData(new Object[0]);
            client.quit();
            ButtonDisconnect.setEnabled(false);
            currentServerDirLabel.setText("/");
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonDisconnectActionPerformed

    private void serverRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverRefreshButtonActionPerformed
        try {
            client.noop();
            serverList.setModel(new ServerListModel(currentServerDir,client));
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_serverRefreshButtonActionPerformed

    private void ButtonMkdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMkdActionPerformed
        String dirName = currentServerDir +
                JOptionPane.showInputDialog("Name of the directory:").replaceAll("/", "");
        try {
            client.makeDirectory(dirName);
            serverList.setModel(new ServerListModel(currentServerDir,client));
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonMkdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable(){
            @Override
            public void run(){
                new ClientGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonConnect;
    private javax.swing.JButton ButtonDele;
    private javax.swing.JButton ButtonDisconnect;
    private javax.swing.JButton ButtonMkd;
    private javax.swing.JButton ButtonRetr;
    private javax.swing.JButton ButtonRmd;
    private javax.swing.JButton ButtonStor;
    private javax.swing.JTextField TextFieldIP;
    private javax.swing.JPasswordField TextFieldPassword;
    private javax.swing.JTextField TextFieldUser;
    private javax.swing.JButton backButton;
    private javax.swing.JList clientList;
    private javax.swing.JTextArea commandsArea;
    private javax.swing.JTextField currentLocalDirLabel;
    private javax.swing.JTextField currentServerDirLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel labelIP;
    private javax.swing.JLabel labelPass;
    private javax.swing.JLabel labelServer;
    private javax.swing.JLabel labelUser;
    private javax.swing.JButton serverBackButton;
    private javax.swing.JList serverList;
    private javax.swing.JButton serverRefreshButton;
    // End of variables declaration//GEN-END:variables
}
